/*
 * @(#)lmslayernav.js  1.1  2006-05-21
 *
 * Copyright (c) 2003-2006 Werner Randelshofer
 * Hausmatt 10, Immensee, CH-6405, Switzerland
 * All rights reserved.
 *
 * The copyright of this software is owned by Werner Randelshofer. 
 * You may not use, copy or modify this software, except in  
 * accordance with the license agreement you entered into with  
 * Werner Randelshofer. For details see accompanying license terms. 
 */ 
/**
 * This scripts inserts a horizontal navigation bar at the current location
 * into a HTML document.
 *
 * This file is intended to be included in a HTML document. The
 * HTML document must be in a child frame of the Learning Management System
 * generated by TinyLMS.
 *
 * Example:
 * <html>
 *   <head>
 *     <title>Table Of Contents</title>
 *     <script language="JavaScript" src="lib/lmscollections.js" type="text/JavaScript"></script>
 *     <script language="JavaScript" src="lib/lmsstub.js" type="text/JavaScript"></script>
 *     <script language="JavaScript" src="lib/lmslayernav.js" type="text/JavaScript"></script>
 *   </head>
 *   <body>
 *     <script language="JavaScript" type="text/JavaScript">nav.writeColumns()</script>
 *     <script language="JavaScript" type="text/JavaScript">nav.writeCells()</script>
 *     <script language="JavaScript" type="text/JavaScript">nav.writeButtons()</script>
 *   </body>
 * </html>
 *
 * @version 1.1 2006-05-21 Rely more on stylesheet.
 * 1.0 2003-09-12 Locale specific labels are now read from the API object.
 * 0.25 2003-08-11 Variable LMSlabels renamed to LMSLabels due to changes in lmslabels.js.
 * 0.24 2003-05-07 gotoNextRow() and gotoPreviousRow()
 * don't go automatically to the menu page anymore, when the user tries to 
 * go over the last or the first page of the tutorial.
 * 0.21 2003-04-08 Display 'page i of n' instead of numbers for cell indicators.
 * 0.20.2 2003-04-07 Display numbers instead of dots for cell indicators.
 * 0.19 2003-04-07 Created.
 */


/**
 * Writes the layers of the current organization.
 * The navigation bar entries are retrieved from the LMS using 
 * protected operations.
 */
Nav.prototype.writeColumns = function() {
  document.write('<table border="0" cellspacing="0" cellpadding="0"><tr>');
	var api = stub.getAPI();
	if (api.isLoggedIn() && api.mode == api.MODE_COURSE) {
		var currentItem = api.getAnticipatedItem();
		if (currentItem == null) currentItem = api.getCurrentItem();
		var currentOrganization = api.getCurrentOrganization();
		var currentColumnName = api.getCurrentColumnName();
		var rowItem = currentOrganization.getRowOfItem(currentItem);
		if (rowItem == null) currentColumnName = "";

  	var columnNames = api.camColumnNames;
		for (var i=0; i < columnNames.length; i++) {
			//if (i != 0) document.write('<img src="images/spacer.gif" width="12" height="1" border="0">');

			  var columnItem = null;
		  	if (rowItem != null) {
			  	for (var j=0; j < rowItem.getChildCount(); j++) {
				  	if (rowItem.getChildAt(j).title == columnNames[i]) {
					  	columnItem = rowItem.getChildAt(j);
							break;
						}
					}
				}
		  	var refItem = null;
				if (columnItem != null) {
		  		refItem = columnItem;
					var resource = refItem.getResource();
  				while (resource == null && refItem.getChildCount() != 0) {
    				refItem = refItem.getChildAt(0);
 						resource = refItem.getResource();
  				}
				}
				if (refItem == null) refItem = currentItem;

      if (columnItem == null) {
					document.write('<td width="92" height="18" align="center" valign="top" class="navNoLayer">');
					document.write(columnNames[i]);
					document.write('</td>');
			} else {
				if (columnNames[i] == currentColumnName) {
					document.write('<td width="92" height="18" align="center" valign="top" class="navCurrent">');
					document.write('<a class="linkCurrent" href="#" onClick="stub.getAPI().gotoItemWithID(\''+refItem.identifier+'\')">');
					document.write(columnNames[i]);
					document.write('</a>');
					document.write('</td>');
				} else {
					if (refItem == null) {
						document.write('<td width="92" height="18" align="center" valign="top" class="navNoLayer">');
						document.write(columnNames[i]);
						document.write('</td>');
					} else {
						document.write('<td width="92" height="18" align="center" valign="top" class="navItem">');
						document.write('<a class="link" href="#" onClick="stub.getAPI().gotoItemWithID(\''+refItem.identifier+'\')">');
						document.write(columnNames[i]);
						document.write('</a>'); 
						document.write('</td>');
					}
				}
			}
		}
  }
	document.write('</tr></table>');
}
/**
 * Writes the cells of the current layer.
 * The cells are retrieved from the LMS using 
 * protected operations.
 * Writes 'page i of n' where 'i' is the index of the current cell + 1
 * and 'n' is the number of cells.
 */
Nav.prototype.writeCells = function() {
	var api = stub.getAPI();
	if (api.isLoggedIn() && api.mode == api.MODE_COURSE) {
		var currentItem = api.getAnticipatedItem();
		if (currentItem == null) currentItem = api.getCurrentItem();
		var currentOrganization = api.getCurrentOrganization();
		var currentColumnName = api.getCurrentColumnName();
		var rowItem = currentOrganization.getRowOfItem(currentItem);

	  var columnItem = currentItem.getParent();
		if (columnItem != null) {
			var cellIndex = -1;
			if (columnItem != rowItem && currentItem != rowItem) {
				for (var i=0; i < columnItem.getChildCount(); i++) {
					if (columnItem.getChildAt(i) == currentItem) {
						cellIndex = i;
						break;
					}
				}
				document.write('<span class="navButton">');
				document.write((cellIndex + 1)+" von "+columnItem.getChildCount());
				document.write('</span>');
			} else {
				document.write('<span class="navButton">');
				document.write("1 von 1");
				document.write('</span>');
			}
		}
	}
}

Nav.prototype.gotoPreviousRow = function() {
	var api = stub.getAPI();
	var nextItem = api.getPreviousRowOf(api.getCurrentItem());
  if (nextItem != null) {
	  	api.gotoItem(nextItem);
	} else {
	//api.gotoMenu();
	}
}

Nav.prototype.gotoNextRow = function() {
	var api = stub.getAPI();
	var nextItem = api.getNextRowOf(api.getCurrentItem());
  if (nextItem != null) {
	  	api.gotoItem(nextItem);
	} else {
	//api.gotoMenu();
	}
}

Nav.prototype.writeButtons = function() {
	var api = stub.getAPI();
	if (api.isLoggedIn() && api.mode == api.MODE_COURSE) {
		var buttonClass = (api.getPreviousRowOf(api.getCurrentItem()) == null) ? "navButtonDisabled" : "navButton";
		//var buttonClass = "navButton";
		document.writeln('<a class="'+buttonClass+'" href="#" onclick="nav.gotoPreviousRow()">'+api.labels.get('toc.previous')+'</a>');
		document.writeln('&nbsp;&nbsp;');
		buttonClass = (api.getNextRowOf(api.getCurrentItem()) == null) ? "navButtonDisabled" : "navButton";
		//buttonClass = "navButton";
		document.writeln('<a class="'+buttonClass+'" href="#" onclick="nav.gotoNextRow()">'+api.labels.get('toc.next')+'</a>');
	}
}

function Nav() {
}

var nav = new Nav();

/*
 * @(#)LMSQuizResults.js 1.0 2009-09-02
 *
 * Copyright (c) 2009 Werner Randelshofer
 * Hausmatt 10, Immensee, CH-6405, Switzerland
 * All rights reserved.
 *
 * The copyright of this software is owned by Werner Randelshofer. 
 * You may not use, copy or modify this software, except in  
 * accordance with the license agreement you entered into with  
 * Werner Randelshofer. For details see accompanying license terms. 
 */ 
/**
 * This scripts inserts quiz results at the current location
 * into a HTML document.
 *
 * This file is intended to be included in the body of a HTML document. The
 * HTML document must be in a child frame of the Learning Management System
 * generated by TinyLMS.
 *
 * Example:
 * <html>
 *   <head>
 *     <title>Table Of Contens</title>
 *     <script language="JavaScript" src="lib/lmscollections.js" type="text/JavaScript"></script>
 *     <script language="JavaScript" src="lib/lmsfonts.js" type="text/JavaScript"></script>
 *     <script language="JavaScript" src="lib/lmslabels.js" type="text/JavaScript"></script>
 *     <script language="JavaScript" src="lib/lmsstub.js" type="text/JavaScript"></script>
 *   </head>
 *   <body>
 *     <script language="JavaScript" src="lib/LMSQuizResults.js" type="text/JavaScript"></script>
 *   </body>
 * </html>
 *
 * @version 1.0 2009-09-02 Created.
 */


/**
 * Creates a new QuizResults object.
 */
function QuizResults() {
}


/**
 * Returns the quiz item.
 */
QuizResults.prototype.getQuiz = function() {
    var api = stub.getAPI();
    return quizItem = api.getCurrentItem().getParent();
}
/**
 * Writes the title of the quiz.
 */
QuizResults.prototype.writeQuizTitle = function() {
    var api = stub.getAPI();
    document.write(this.getQuiz().title);
}
/**
 * Writes a toc subtree starting from the specified toc item.
 *
 * @param node the root of the subtree.
 * @param depth The depth of the node in the TOC tree.
 */
QuizResults.prototype.writeSubtree = function(node, depth) {
    var title = FontsSingleton.cropString(node.title, 28 - depth * 2);
    var resource = node.getResource();
    var lessonStatus = (resource == null) ? "" : resource.cmi_core_lesson_status;
    var i;

    document.writeln('<tr>');
    document.write('<td class="statistics">');
    for (i=0; i < depth; i++) {
      document.write('&nbsp;&nbsp;');
    }
    if (resource != null) document.write('<a class="statistics" href="#" onClick="stub.getAPI().gotoItemWithID(\''+node.identifier+'\');return false;">');
    document.write(title);
    if (resource != null) document.writeln('</a>');
    document.writeln('</td>');
    document.write('<td class="statistics">');
    switch (lessonStatus) {
        case "passed" :
        case "completed" :
        case "failed" :
        case "incomplete" :
        case "browsed" :
            document.write('<img src="style/tocStatusBrowsed.gif" width="12" height="9" border="0">');
            break;
        case "not attempted" :
        case "" :
        case null :
        default :
            document.write('<img src="style/tocStatusNotAttempted.gif" width="12" height="9" border="0">');
            break;
    }
    document.writeln('</td>');
    document.write('<td class="statistics">');
    switch (lessonStatus) {
        case "passed" :
        case "completed" :
            document.write('<img src="style/tocStatusPassed.gif" width="12" height="9" border="0">');
            break;
        case "failed" :
        case "incomplete" :
            document.write('<img src="style/tocStatusFailed.gif" width="12" height="9" border="0">');
            break;
        case "browsed" :
            document.write('<img src="style/tocStatusBrowsed.gif" width="12" height="9" border="0">');
            break;
        case "not attempted" :
        case "" :
        case null :
        default :
            document.write('<img src="style/tocStatusNotAttempted.gif" width="12" height="9" border="0">');
            break;
    }
    document.writeln('</td>');
    document.writeln('<tr>');

    if (node.isTraversable()) {
        for (i=0; i < node.getChildCount(); i++) {
            this.writeSubtree(node.getChildAt(i), depth + 1);
        }
    }
}

/**
 * Writes detailed statistics.
 * The TOC entries are retrieved from the LMS using 
 * protected operations.
 */
QuizResults.prototype.writeStatistics = function() {
    var api = stub.getAPI();
    if (api.isLoggedIn()) {
        document.writeln('<table border="0" cellspacing="1" cellpadding="0">');
        document.writeln('<tr>');
        document.writeln('<td width="230" class="statisticsTitle">'+api.labels.get("statistics.pages")+'</td>');
        document.writeln('<td width="65" class="statisticsTitle">'+api.labels.get("statistics.viewed")+'</td>');
        document.writeln('<td width="65" class="statisticsTitle">'+api.labels.get("statistics.passed")+'</td>');
        document.writeln('</tr>');
        document.writeln('<tr>');
        document.writeln('<td >&nbsp;</td>');
        document.writeln('</tr>');

        var quiz = this.getQuiz();
        for (var i=0; i < quiz.getChildCount(); i++) {
            var child = quiz.getChildAt(i);
            this.writeSubtree(child, 0);
        }

        document.writeln("</table>");
    }
}
/**
 * Writes a summary.
 * The TOC entries are retrieved from the LMS using 
 * protected operations.
 */
QuizResults.prototype.writeSummary = function() {
    var api = stub.getAPI();
    if (api.isLoggedIn()) {
        var quiz = this.getQuiz();
        var pageCount = 0;
        var visitedCount = 0;
        var passedCount = 0;
        var failedCount = 0;
        var exercisesCount = 0;
        var nodeCount = 0;
        var i;
        for (i=0; i<quiz.getChildCount() - 1; i++) {
            var node = quiz.getChildAt(i);
            nodeCount++;
            if (node.isItemElement && node.getResource() != null) {
                 pageCount++;

                 var resource = node.getResource();
                 switch (resource.cmi_core_lesson_status) {
                    case "passed" :
                    case "completed" :
                            passedCount++;
                            visitedCount++;
                            exercisesCount++;
                            break;
                    case "failed" :
                    case "incomplete" :
                            failedCount++;
                            exercisesCount++;
                            visitedCount++;
                            break;
                    case "browsed" :
                            //failedCount++;
                            exercisesCount++;
                            visitedCount++;
                            break;
                    case "not attempted" :
                            exercisesCount++;
                            break;
                    case "" :
                    case null :
                    default :
                            exercisesCount++;
                            break;
                }
            }
            node = node.getNextNode();
        }
        /*
        document.write('nodeCount:'+nodeCount+'<br>');
        document.write('pageCount:'+pageCount+'<br>');
        document.write('visitedCount:'+visitedCount+'<br>');
        document.write('passedCount:'+passedCount+'<br>');
        document.write('failedCount:'+failedCount+'<br>');
        document.write('exercisesCount:'+exercisesCount+'<br>');*/
        document.write(api.labels.format("quiz.results.summary", [passedCount, pageCount])+'<br>');
        /*if (failedCount != 0) {
                document.write(api.labels.format("statistics.pagesfailed", [failedCount])+'<br>');
        }*/
    }
}
/**
 * Clears the statistics
 * The TOC entries are retrieved from the LMS using 
 * protected operations.
 */
QuizResults.prototype.clearStatistics = function() {
	var api = stub.getAPI();
	if (api.isLoggedIn()) {
	  api.clearDatabase();
		api.gotoIndex();
	}
}



var QuizResultsSingleton = new QuizResults();

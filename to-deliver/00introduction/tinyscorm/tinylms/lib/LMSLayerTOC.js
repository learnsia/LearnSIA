/*
 * @(#)lmslayertoc.js  3.0  2007-06-18
 *
 * Copyright (c) 2003-2007 Werner Randelshofer
 * Hausmatt 10, Immensee, CH-6405, Switzerland
 * All rights reserved.
 *
 * The copyright of this software is owned by Werner Randelshofer. 
 * You may not use, copy or modify this software, except in  
 * accordance with the license agreement you entered into with  
 * Werner Randelshofer. For details see accompanying license terms. 
 */ 
/**
 * This scripts inserts a table of contents (TOC) at the current location
 * into a HTML document.
 *
 * This file is intended to be included in a HTML document. The
 * HTML document must be in a child frame of the Learning Management System
 * generated by TinyLMS.
 *
 * Example:
 * <html>
 *   <head>
 *     <title>Table Of Contens</title>
 *     <script language="JavaScript" src="lib/lmscollections.js" type="text/JavaScript"></script>
 *     <script language="JavaScript" src="lib/lmsfonts.js" type="text/JavaScript"></script>
 *     <script language="JavaScript" src="lib/lmsstub.js" type="text/JavaScript"></script>
 *   </head>
 *   <body>
 *     <script language="JavaScript" src="lib/lmslayertoc.js" type="text/JavaScript"></script>
 *   </body>
 * </html>
 *
 * @version 3.0 2007-06-18 Redesigned to create better stylable HTML code.
 * <br>2.0 2006-05-17 The TOC design relies now more on CSS stylesheets than 
 * it did before.
 * 1.2.1 2004-06-14 We must not select an item when TinyLMS is not in course mode.
 * 1.2 2004-06-13 Support for debugging improved.
 * <br> 1.1.7 2003-11-06 Support for debugging added. 
 * <br>1.1 2003-11-04 Adapted to changes in lmsapi.js and lmscam.js.
 * <br>1.0.1 2003-10-30 Retrieve version number from API.
 * <br>1.0 2003-09-12  Locale specific labels are now read from the API object.
 * <br>0.21 2003-06-30 Function showDebugInfo() added.
 * <br>0.20.1 2003-04-07 The Safari browser can not handle return statements
 * within switch statements.
 * <br>0.19.4 2003-04-04 Revised.
 * <br>0.19.3 2003-04-01 Revised.
 * <br>0.19 2003-03-26 Revised.
 * <br>0.18 2003-03-26 Created.
 */

/** Creates a TOC object. */
function TOC() {
}

/**
 * Writes the title of the table contents.
 * The title is the name of the current CAM organization.
 *
 * @param organizationElement the CAM organization element.
 */
TOC.prototype.writeOrganization = function(organizationElement) {
	document.writeln('<div id="tocTitle">');
	document.writeln('<a href="#" onclick="stub.getAPI().gotoIndex()">'+organizationElement.title+'</a>'); 
	document.writeln('</div>');
}

TOC.prototype.getCSSClass = function(lessonStatus) {
    var result = "tocStatus";
	switch (lessonStatus) {
		case "passed" :
		case "completed" :
		case "failed" :
		case "incomplete" :
		case "browsed" :
		case "not attempted" :
		case "" :
			result += "NotAttempted";
			break;
		case "current" :
			result += "Current";
			break;
		default :
			result = "";
			break;
	}
	return result;
	
}


/**
 * Writes the toc starting from depth 0 for the
 * subtree starting from the specified item.
 *
 * @param currentOrganization the current organization.
 * @param node The root of the subtree. node must be an instance of lmscam.js:ItemElement
 * @param selectedItem the selected item. selectedItem must be an instance of lmscam.js:ItemElement
 * @param depth The depth of the node in the TOC tree (must be 0).
 */
TOC.prototype.writeTOC1 = function(currentOrganization, node, selectedItem, depth) {
	document.writeln('<ul class="toc1">');
	var title = FontsSingleton.cropString(node.title,27);

	var currentColumnName = stub.getAPI().getCurrentColumnName();
  var refItem = node;
  var columnItem = null;
	if (currentColumnName != null) {
 	  for (var i=0; i < node.getChildCount(); i++) {
      columnItem = node.getChildAt(i);
  	  if (columnItem.title == currentColumnName) {
				refItem = columnItem;
				break;			
			}
	  }	
	}
	
	var resource = refItem.getResource();
  while (resource == null && refItem.getChildCount() != 0) {
    refItem = refItem.getChildAt(0);
 		resource = refItem.getResource();
		columnItem = currentOrganization.getColumnOfItem(refItem);
  }
	
	
	var lessonStatus = (resource == null) ? "" : resource.cmi_core_lesson_status;
	if (node.isNodeDescendant(selectedItem)) lessonStatus = "current"; 
	var cssClass = this.getCSSClass(lessonStatus);
	document.writeln('<li class="tocNodeLeaf">');
	if (resource == null) {
	  	document.write('<div class="tocStatusNoLayer">');
		document.write(title); 
	  	document.write('</div>');
	} else if (columnItem == null || columnItem.title != currentColumnName) {
	  	document.write('<div class="tocStatusNoLayer">');
		if (resource != null) document.write('<a class="tocItem" href="#" onClick="stub.getAPI().gotoItemWithID(\''+refItem.identifier+'\')">');
		document.write(title); 
		if (resource != null) document.write('</a>'); 
	  	document.write('</div>');
	} else {
	  	document.write('<div class="'+cssClass+'" >');
		if (resource != null) document.write('<a  class="tocItem" href="#" onClick="stub.getAPI().gotoItemWithID(\''+refItem.identifier+'\')">');
		document.write(title); 
		if (resource != null) document.write('</a>'); 
	  	document.write('</div>');
	}
	document.writeln('</li>');
	document.writeln('</ul>');
}

/**
 * Writes the table of contents.
 * The TOC entries are retrieved from the LMS using 
 * protected operations.
 */
TOC.prototype.writeTOC = function() {
	var api = stub.getAPI();
	if (api.isLoggedIn()) {
		//var selectedItem = api.getAnticipatedItem();
		var selectedItem = null;
		if (api.mode == api.MODE_COURSE) {
			if (selectedItem == null) selectedItem = api.getCurrentItem();
		}
 		var currentOrganization = api.getCurrentOrganization();
		this.writeOrganization(currentOrganization);
	  
		if (api.showDebugButtons || api.showBugInfoButton) {
			document.write('<div class="tocButton">');
			if (api.showDebugButtons) {
			document.write('<a href="#" onclick="stub.getAPI().toggleLogging();stub.getAPI().fireUpdateTOC();">');
			if (api.logger.level > 0) {
					document.write(api.labels.get('debug.switchLoggingOff'));
				} else {
					document.write(api.labels.get('debug.switchLoggingOn'));
				}
				document.writeln('</a>');
			}
			if (api.showBugInfoButton) {
				if (api.showDebugButtons) {
					document.write(' | ');
				} else {
					document.writeln('<br/>');
				}			
				document.write('<a href="#" onclick="stub.getAPI().showBugInfo()">');
				document.write(api.labels.get('debug.showInfo'));
				document.write('</a>');
			}
			document.writeln('<br/></div>');
		}

		document.write('<div class="tocTopics">');
		for (var i=0; i < currentOrganization.getChildCount(); i++) {
			var child = currentOrganization.getChildAt(i);
				this.writeTOC1(currentOrganization, child, selectedItem, 0);
		}
		document.writeln('</div>');
	}
}

var t = new TOC();
t.writeTOC();
